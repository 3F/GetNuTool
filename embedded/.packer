<?xml version="1.0" encoding="utf-8"?>
<!-- 
    Copyright (c) 2015-2018  Denis Kuzmin [ entry.reg@gmail.com ]
    
    Distributed under the GetNuTool license
    https://github.com/3F/GetNuTool
-->

<!--
    To create executable package of the GetNuTool
-->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <!-- Main settings -->
    <PropertyGroup>
        <core Condition="'$(core)' == ''">..\logic.targets</core>
        <output Condition="'$(output)' == ''">gnt.bat</output>
        <maxline Condition="'$(maxline)' == ''">1777</maxline> <!-- length of line / max 2047 or 8191 characters https://support.microsoft.com/en-us/kb/830473 -->
    </PropertyGroup>

    <!-- Entry point -->
    <Target Name="handler" BeforeTargets="Build">
        <Packing core="$(core)" output="$(output)" maxline="$(maxline)" />
    </Target>
    
    <!-- Tasks settings -->
    <PropertyGroup>
        <TaskCoreDllPath Condition="Exists('$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</TaskCoreDllPath>
        <TaskCoreDllPath Condition="'$(TaskCoreDllPath)' == '' and Exists('$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</TaskCoreDllPath>
    </PropertyGroup>

    <UsingTask
        TaskName="Packing"
        TaskFactory="CodeTaskFactory"
        AssemblyFile="$(TaskCoreDllPath)">

        <ParameterGroup>
            <core ParameterType="System.String" Required="true" />
            <output ParameterType="System.String" Required="true" />
            <maxline ParameterType="System.Int32" Required="true" />
        </ParameterGroup>

        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.IO" />
            <Using Namespace="System.Linq" />
            <Using Namespace="System.Text" />
            <Using Namespace="System.Text.RegularExpressions" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[

                    Func<char, string> quotes = delegate(char symbol)
                    {
                        return String.Format(@"
                                                (?<!\\)
                                                (
                                                {0}(?:
                                                        (?:
                                                        [^{0}\\]
                                                        |
                                                        \\\\
                                                        |
                                                        \\{0}?
                                                        )*
                                                    ){0}
                                                )",
                                                symbol);
                    };

                    Func<string, Dictionary<int, int>> scalc = delegate(string content)
                    {
                        var data = new Dictionary<int, int>(); // positions: "(start) -> "(length)

                        var matches = Regex.Matches(content, quotes('"'), RegexOptions.IgnorePatternWhitespace);
                        foreach(Match m in matches) {
                            data[m.Index] = m.Length;
                        }
                        return data;
                    };

                    Func<int, Dictionary<int, int>, bool> isInsideString = delegate(int idx, Dictionary<int, int> strings)
                    {
                        foreach(var s in strings)
                        {
                            if(idx > s.Key && idx < (s.Key + s.Value)) {
                                return true;
                            }
                        }
                        return false;
                    };

                    using(StreamReader reader = new StreamReader(core, System.Text.Encoding.UTF8, true))
                    {
                        var content = reader.ReadToEnd();

                        // First, avoid special chars
                        // btw, we can use simply: set /P ="..." and escape only `"` as `""`, 
                        //      but later we also should replace this double quotes :( that more problem for batch

                        content = content.Replace("%", "%%");
                        // content = content.Replace("^", "^^"); - today we use it only inside double strings
                        content = content.Replace("&", "^&");
                        content = content.Replace("<", "^<");
                        content = content.Replace(">", "^>");
                        // content = content.Replace("|", "^|"); // - don't escape this inside strings ".."

                        // Required only when enableDelayedExpansion is active
                        //content = content.Replace("!", "^^!");

                        // Protecting data outside strings only:
                        content = Regex.Replace(content, @"\|", (Match m) => isInsideString(m.Index, scalc(content)) ? m.Value : "^" + m.Value);

                        // Secondly, keep in mind where placed all strings.
                        // We will work without double quotes, so we should correctly define all pairs of "..." per line

                        var strings = scalc(content);

                        // Now, we should split long strings

                        var lines = new List<string>();
                        for(int i = 0, len = maxline; i < content.Length; i += len)
                        {
                            int rlen = Math.Min(content.Length - i, len);
                            int rpos = i + rlen;

                            bool added = false;
                            foreach(var ifq in strings)
                            {
                                // Protect strings that we saw above
                                if(rpos >= ifq.Key && rpos <= ifq.Key + ifq.Value)
                                {
                                    int repos = ((ifq.Key + ifq.Value) - rpos);

                                    lines.Add(content.Substring(i, rlen + repos));
                                    i += repos;

                                    added = true;
                                    break;
                                }
                            }

                            if(added) {
                                continue;
                            }

                            // we don't see strings, but we also have escape chars as ^ + char above

                            int esc     = rpos - 1; // the end of the previous line that should be checked on `^` char
                            int lchar   = Math.Min(rpos, content.Length - 1);
                            if(content.Length > esc && (content.ElementAt(esc) == '^' || content.ElementAt(lchar) == ' ')) {
                                rlen += 1;
                                lines.Add(content.Substring(i, rlen));
                                i += 1;
                                continue;
                            }

                            // TODO: the line cannot be started with: ` `(space), `=`, `"`

                            lines.Add(content.Substring(i, rlen)); // simply add new line without processing
                        }

                        // Now we can define, how it should be written into external file

                        const string corevar    = "tgnt";
                        content                 = String.Empty;

                        foreach(var line in lines)
                        {
                            //content += $"<nul set /P ={line}>> %{corevar}%{Environment.NewLine}";
                            string ldata = String.Format("<nul set /P ={0}>>%{1}%\r\n", line, corevar);

                            if(ldata.Length > 2047) {
                                Console.WriteLine("[Warn] Length of line {0}", ldata.Length);
                            }
                            else if(ldata.Length > 8191) {
                                Console.Error.WriteLine("[Error] Length of line {0}", ldata.Length);
                            }
                            
                            content += ldata;
                        }

                        // Finally, format script to work with gnt.core

                        using(StreamReader tplreader = new StreamReader("exec.tpl", System.Text.Encoding.UTF8, true)) {
                            content = tplreader.ReadToEnd().Replace("$gnt.core.logic$", content).Replace("$tpl.corevar$", corevar);
                        }

                        // 

                        using(TextWriter writer = new StreamWriter(output, false, new UTF8Encoding(false))) { // do not use BOM ! it failed with initial signature
                            writer.Write(content);
                        }
                        Console.WriteLine("Executable version of `{0}` has been created -> `{1}`", core, output);
                    }
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <!-- remap targets -->

    <Target Name="Build" DependsOnTargets="handler" />

</Project>