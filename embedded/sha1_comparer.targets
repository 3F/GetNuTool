<?xml version="1.0" encoding="utf-8"?>
<!--
    Part of GetNuTool
    https://github.com/3F/GetNuTool

    SHA-1 Comparer for minified + embedded versions of gnt.core
-->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <!-- Entry point -->
    <Target Name="handler" BeforeTargets="Build">
        <Check core1="$(core1)" core2="$(core2)" />
    </Target>
    
    <!-- Tasks settings -->
    <PropertyGroup>
        <TaskCoreDllPath Condition="Exists('$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</TaskCoreDllPath>
        <TaskCoreDllPath Condition="'$(TaskCoreDllPath)' == '' and Exists('$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</TaskCoreDllPath>
    </PropertyGroup>

    <UsingTask
        TaskName="Check"
        TaskFactory="CodeTaskFactory"
        AssemblyFile="$(TaskCoreDllPath)">

        <ParameterGroup>
            <core1 ParameterType="System.String" Required="true" />
            <core2 ParameterType="System.String" Required="true" />
        </ParameterGroup>

        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.IO" />
            <Using Namespace="System.Security.Cryptography" />
            <Code Type="Fragment" Language="cs"><![CDATA[

                Func<byte[], byte[], int> find = delegate(byte[] what, byte[] where)
                {
                    int lpos = -1;

                    if(where.Length < 1 || what.Length > where.Length) {
                        return lpos;
                    }

                    for(int i = 0; i < where.Length; ++i)
                    {
                        lpos = i;
                        for(int j = 0; j < what.Length; ++j) {
                            if(where[i + j] != what[j]) {
                                lpos = -1;
                                break;
                            }
                        }

                        if(lpos != -1) {
                            break;
                        }
                    }

                    return lpos;
                };

                Console.WriteLine("Core 1 '{0}'", core1);
                Console.WriteLine("Core 2 '{0}'", core2);

                if(!File.Exists(core1) || !File.Exists(core2)) {
                    Console.Error.WriteLine("One or more files are not found.");
                    return false;
                }

                Console.WriteLine("Compute SHA-1 ...");

                using(var f1 = File.OpenRead(core1))
                using(var f2 = File.OpenRead(core2))
                {
                    using(SHA1 sha1 = SHA1.Create())
                    {
                        byte[] h1 = sha1.ComputeHash(f1);
                        byte[] h2 = sha1.ComputeHash(f2);

                        if(find(h1, h2) != -1) {
                            Console.WriteLine("Core 1 == Core 2 :: Core 1 is completely identical Core 2");
                            return true;
                        }

                        Console.Error.WriteLine("Core 1 != Core 2 :: SHA-1 are not equal.");
                    }
                }

                Action<string> report = delegate(string file)
                {
                    string brFile = file + "_";
                    if(File.Exists(brFile)) {
                        File.Delete(brFile);
                    }
                    File.Move(file, brFile);
                };

                report(core1);
                report(core2);

            ]]></Code>
        </Task>
    </UsingTask>

    <!-- remap targets -->

    <Target Name="Build" DependsOnTargets="handler" />

</Project>